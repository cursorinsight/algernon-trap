{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// TODO: save touchScreenX/Y values into state\n// TODO: simplify / group start/end/move handlers, they are nearly identical\nvar startEventName = \"touchstart\",\n    endEventName = \"touchend\",\n    moveEventName = \"touchmove\",\n    touchIdToId = [];\n\nvar TouchHandler = function () {\n  function TouchHandler(element, state, buffer) {\n    _classCallCheck(this, TouchHandler);\n\n    this.element = element, this.state = state, this.buffer = buffer;\n\n    this.startHandler = this.startHandler.bind(this);\n    this.moveHandler = this.moveHandler.bind(this);\n    this.endHandler = this.endHandler.bind(this);\n  }\n  // ---------------------------------------------------------------------------\n\n\n  // finds an existing (or free) id for given touchId, starting from 0.\n\n\n  _createClass(TouchHandler, [{\n    key: \"resolveId\",\n    value: function resolveId(touchId) {\n      var firstFree,\n          length = touchIdToId.length,\n          i = 0;\n      for (; i < length; i++) {\n        if (touchIdToId[i] === touchId) {\n          return i;\n        }\n        if (touchIdToId[i] === undefined) {\n          firstFree = firstFree || i;\n        }\n      }\n      if (typeof firstFree === \"number\") {\n        touchIdToId[firstFree] = touchId;\n        return firstFree;\n      } else {\n        touchIdToId.push(touchId);\n        return length;\n      }\n    }\n  }, {\n    key: \"removeId\",\n\n\n    // removes touchId from list.\n    value: function removeId(touchId) {\n      var length = touchIdToId.length,\n          i = 0;\n      for (; i < length; i++) {\n        if (touchIdToId[i] === touchId) {\n          touchIdToId[i] = undefined;\n        }\n      }\n      i--;\n      for (; i >= 0; i--) {\n        if (touchIdToId[i] === undefined) {\n          touchIdToId.pop();\n        } else {\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"startHandler\",\n    value: function startHandler(event) {\n      var dT = this.state.getDT(event, 20),\n          changedTouches = event.changedTouches,\n          length = changedTouches.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        var ev = changedTouches[i],\n            id = resolveId(ev.identifier);\n        this.buffer.push([3, dT, 1, id, ev.screenX, ev.screenY], [4, 20, 1, 5, 18, 18]);\n        dT = 0; // next\n      }\n\n      return true;\n    }\n  }, {\n    key: \"endHandler\",\n    value: function endHandler(event) {\n      var dT = this.state.getDT(event, 20),\n          changedTouches = event.changedTouches,\n          length = changedTouches.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        var ev = changedTouches[i],\n            id = resolveId(ev.identifier);\n        this.buffer.push([3, dT, 0, id, ev.screenX, ev.screenY], [4, 20, 1, 5, 18, 18]);\n\n        removeId(ev.identifier);\n\n        dT = 0; // next\n      }\n\n      return true;\n    }\n  }, {\n    key: \"moveHandler\",\n    value: function moveHandler(event) {\n      var dT = this.state.getDT(event, 20),\n          changedTouches = event.changedTouches,\n          length = changedTouches.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        var ev = changedTouches[i],\n            id = resolveId(ev.identifier);\n        this.buffer.push([1, dT, 0, id, ev.screenX, ev.screenY], [4, 20, 1, 5, 18, 18]);\n        dT = 0; // next\n      }\n\n      return true;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.element.addEventListener(startEventName, this.startHandler);\n      this.element.addEventListener(moveEventName, this.moveHandler);\n      this.element.addEventListener(endEventName, this.endHandler);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.element.removeEventListener(startEventName, this.startHandler);\n      this.element.removeEventListener(moveEventName, this.moveHandler);\n      this.element.removeEventListener(endEventName, this.endHandler);\n    }\n  }]);\n\n  return TouchHandler;\n}();\n\n;\n\nexports.default = TouchHandler;"},"hash":"e1fff027fd5e573b7d88b06580cc2fe7"}