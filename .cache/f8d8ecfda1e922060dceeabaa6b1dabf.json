{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar\n// abs = Math.abs,\neventName = \"mousemove\";\n\n// TODO: http://www.jacklmoore.com/notes/mouse-position/\n\nvar MouseMoveHandler = function () {\n  function MouseMoveHandler(element, state, buffer) {\n    _classCallCheck(this, MouseMoveHandler);\n\n    this.element = element, this.state = state, this.buffer = buffer;\n\n    this.handler = this.handler.bind(this);\n  }\n\n  _createClass(MouseMoveHandler, [{\n    key: \"handler\",\n    value: function handler(event) {\n      var dT = this.state.getDT(event, 20),\n          sX = event.screenX,\n          sY = event.screenY;\n\n      // Saving for next check\n      this.state.mouseScreenX = sX;\n      this.state.mouseScreenY = sY;\n\n      this.buffer.push([0, dT, sX, sY], [4, 20, 18, 18]);\n\n      // Saving for markers -- temporarily disabled\n      // state.cX = event.clientX;\n      // state.cY = event.clientY;\n      // buffer.push([0, dT, sX, sY, event.clientX, event.clientY],\n      //             [4, 20, 18, 18,            18,            18]);\n\n      return true;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n\n      // TODO: Something more accurate is needed.\n      this.state.mouseScreenX = this.state.mouseScreenX || 0;\n      this.state.mouseScreenY = this.state.mouseScreenY || 0;\n\n      this.element.addEventListener(eventName, this.handler);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.element.removeEventListener(eventName, this.handler);\n    }\n  }]);\n\n  return MouseMoveHandler;\n}();\n\n;\n\nexports.default = MouseMoveHandler;"},"hash":"b40dac9893ffb4ce4ba62b28d0485c40"}