{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n// @constant\nvar head = \"BB\"; // v2 :)\n\n// buffer\n\n// Locals.\nvar url = \"/s\",\n    headers = {},\n    counter = 1,\n    sessionID;\n\nvar Transport = function () {\n  function Transport(window) {\n    _classCallCheck(this, Transport);\n\n    this.window = window, this.encodeWrapper = window.encodeURIComponent;\n    this.buffer = \"\";\n    this.send = this.send.bind(this);\n  }\n  // ---------------------------------------------------------------------------\n\n  // @constant\n\n\n  _createClass(Transport, [{\n    key: \"encodeValues\",\n    value: function encodeValues(values, sizes) {\n      var idx,\n          len = values.length,\n          bc = 0,\n          // bit counter\n      cv,\n          // current value\n      av = 0,\n          // actual value\n      size,\n          results = \"\";\n\n      for (idx = 0; idx < len; idx++) {\n        cv = values[idx];\n        size = sizes[idx];\n        if (cv < 0) {\n          cv = 0;\n        }\n        if (cv > (2 << size) - 1) {\n          cv = (2 << size) - 1;\n        }\n        if (av > 0) {\n          av = av << size;\n        }\n        av |= cv & (1 << size) - 1;\n        bc += size;\n        while (bc > 6) {\n          bc -= 6;\n          results += map[av >>> bc];\n          av &= (1 << bc) - 1;\n        }\n      }\n\n      results += map[av << 6 - bc];\n\n      return results;\n    }\n  }, {\n    key: \"encodeHeaders\",\n    value: function encodeHeaders(headers) {\n      var headerString = \"\";\n\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          headerString = headerString + this.encodeWrapper(key) + \"=\" + this.encodeWrapper(headers[key]) + \",\";\n        }\n      }\n\n      return this.encodeValues([headerString.length], [12]) + headerString;\n    }\n  }, {\n    key: \"reset\",\n\n\n    /*\r\n     * @private\r\n     * Resets buffer.\r\n     */\n    value: function reset() {\n      this.buffer = \"\";\n      return true;\n    }\n\n    /*\r\n     * @private\r\n     * Shifts available data.  That means resetting to its defaults and returning\r\n     * already collected events.\r\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      var contents = this.buffer;\n      this.reset();\n      return contents;\n    }\n\n    /*\r\n     * @private\r\n     * Encodes raw bytes into stream format (length + URI encoded string\r\n     * representation).\r\n     */\n\n  }, {\n    key: \"encodeRawBytes\",\n    value: function encodeRawBytes(bytes) {\n      var encoded = this.encodeWrapper(bytes);\n      return this.encodeValues([encoded.length], [12]) + encoded;\n    }\n  }, {\n    key: \"send\",\n    value: function send(sync, callback) {\n      try {\n        var x = new (this.window.XMLHttpRequest || this.window.ActiveXObject)('MSXML2.XMLHTTP.3.0');\n        x.open('POST', url, 1);\n        x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        x.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n        x.onreadystatechange = function () {\n          if (x.readyState === 4 && x.status === 200) {\n            console.log(\"success\");\n          } else {\n            console.log(\"fail\");\n          }\n        };\n\n        x.send(head + this.encodeHeaders(headers) + this.shift());\n      } catch (e) {\n        window.console && console.log(e);\n      }\n    }\n  }, {\n    key: \"setUrl\",\n\n    /**\r\n     * Sends data to destination.\r\n     */\n    // send(sync, callback) {\n    //   var\n    //     req = new window.XMLHttpRequest(),\n    //     onResponse = function () {\n    //       if (callback) {\n    //         if ((req.readyState === 4) && (req.status === 200)) {\n    //           callback(req);\n    //         } else {\n    //           console.log(\"Failure\")\n    //         }\n    //       }\n    //     },\n    //     onSuccess = function () { console.log(\"success\") }, // TODO\n    //     onFailure = function () { console.log(\"Failure\") }; // TODO\n\n    //   // TODO make it configurable (enable/disable) w//o\n    //   headers[\"stream-id\"] = (sessionID ? sessionID : \"\") + \".\" + (counter++);\n\n    //   if (\"withCredentials\" in req) { // Is it a real XMLHttpRequest2 object\n    //     req.open(\"POST\", url, !sync);\n    //     req.onreadystatechange = onResponse; // TODO XMLHttpRequest2 has onload and co...\n    //     req.setRequestHeader(\"Content-type\", \"text/plain\");\n    //     // req.withCredentials = true;\n    //   } else if (typeof this.window.XDomainRequest !== \"undefined\") { // XDomainRequest only exists in IE\n    //     req = new this.window.XDomainRequest();\n    //     req.onload = onSuccess;\n    //     req.onerror = onFailure;\n    //     req.contentType = \"text/plain\";\n    //     req.open(\"POST\", url);\n    //   } else if (typeof this.window.ActiveXObject !== \"undefined\") { // Is it OK? :)\n    //     req = new this.window.ActiveXObject(\"Microsoft.XMLHTTP\");\n    //     req.open(\"POST\", url);\n    //   } else {\n    //     // TODO Firefox in test mode get to this branch\n    //     req.open(\"POST\", url, !sync);\n    //     req.onload = onResponse;\n    //     req.setRequestHeader(\"Content-type\", \"text/plain\");\n    //     //req = null;\n    //     //throw new Error('CORS not supported'); // TODO\n    //   }\n    //   console.log(head + this.encodeHeaders(headers) + this.shift());\n    //   req.send(head + this.encodeHeaders(headers) + this.shift());\n\n    //   return true;\n    // };\n\n    /**\r\n     * Sets destination URL.\r\n     */\n    value: function setUrl(u) {\n      url = u;\n    }\n  }, {\n    key: \"setHeader\",\n\n\n    /**\r\n     * Sets request header k/v pair.\r\n     */\n    value: function setHeader(key, value) {\n      headers[key] = value;\n    }\n  }, {\n    key: \"setSessionI\",\n\n\n    /**\r\n     * Sets session ID for this session.\r\n     */\n    value: function setSessionI(s) {\n      sessionID = s;\n    }\n  }, {\n    key: \"getBuffer\",\n\n\n    /**\r\n     * Returns current buffer contents (without version magic and headers).\r\n     */\n    value: function getBuffer() {\n      return this.buffer;\n    }\n  }, {\n    key: \"push\",\n\n\n    /**\r\n     * Encodes and pushes values sampled by its given size into buffer.\r\n     */\n    value: function push(values, sizes) {\n      this.buffer += this.encodeValues(values, sizes);\n      return this.buffer;\n    }\n  }, {\n    key: \"pushRawBytes\",\n\n\n    /**\r\n     * Encodes raw bytes into stream format (length + URI encoded string\r\n     * representation).\r\n     */\n    // this.encodeRawBytes = encodeRawBytes;\n\n    /**\r\n     * Appends raw (encoded) bytes to buffer.\r\n     */\n    value: function pushRawBytes(bytes) {\n      this.buffer += this.encodeRawBytes(bytes);\n      return this.buffer;\n    }\n  }]);\n\n  return Transport;\n}();\n\n;\n\nexports.default = Transport;"},"hash":"1a4b3efa5cb69661ada4c32db80942dd"}