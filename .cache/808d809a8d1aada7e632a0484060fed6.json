{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar eventName = \"ct:mark\",\n    defaultText = \"marker\";\n\nvar MarkerHandler = function () {\n  function MarkerHandler(window, document, element, state, buffer) {\n    _classCallCheck(this, MarkerHandler);\n\n    this.window = window, this.document = document, this.element = element, this.state = state, this.buffer = buffer;\n\n    this.handler = this.handler.bind(this);\n  }\n  // ---------------------------------------------------------------------------\n\n  /*\r\n   * Marker event name (constant).\r\n   */\n\n  _createClass(MarkerHandler, [{\n    key: \"handler\",\n    value: function handler(event) {\n      var dT = this.state.getDT(event, 20),\n          text = event && event.text || defaultText;\n\n      this.buffer.push([14, dT], [4, 20]);\n      this.buffer.pushRawBytes(text);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(text) {\n      var markEvent = this.document.createEvent(\"CustomEvent\");\n      markEvent.initEvent(eventName, true, false);\n      markEvent.text = text || \"mark\";\n      this.element.dispatchEvent(markEvent);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.element.addEventListener(eventName, this.handler, false);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.element.removeEventListener(eventName, this.handler);\n    }\n  }]);\n\n  return MarkerHandler;\n}();\n\nexports.default = MarkerHandler;"},"hash":"10a21f8d10cb4b9f3217392399eaa1b9"}