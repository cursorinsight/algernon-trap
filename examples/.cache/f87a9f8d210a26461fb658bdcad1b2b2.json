{"dependencies":[],"generated":{"js":"/* global module */\r\n\r\n// TODO: save touchScreenX/Y values into state\r\n// TODO: simplify / group start/end/move handlers, they are nearly identical\r\n\r\nvar TouchHandler = function(element, state, buffer) {\r\n\"use strict\";\r\n// ---------------------------------------------------------------------------\r\n\r\nvar\r\n  startEventName = \"touchstart\",\r\n  endEventName = \"touchend\",\r\n  moveEventName = \"touchmove\",\r\n\r\n  touchIdToId = [],\r\n\r\n  // finds an existing (or free) id for given touchId, starting from 0.\r\n  resolveId = function(touchId) {\r\n    var\r\n      firstFree,\r\n      length = touchIdToId.length,\r\n      i = 0;\r\n    for(; i < length; i++) {\r\n      if (touchIdToId[i] === touchId) { return i; }\r\n      if (touchIdToId[i] === undefined) { firstFree = firstFree || i; }\r\n    }\r\n    if (typeof firstFree === \"number\") {\r\n      touchIdToId[firstFree] = touchId;\r\n      return firstFree;\r\n    } else {\r\n      touchIdToId.push(touchId);\r\n      return length;\r\n    }\r\n  },\r\n\r\n  // removes touchId from list.\r\n  removeId = function(touchId) {\r\n    var length = touchIdToId.length, i = 0;\r\n    for(; i < length; i++) {\r\n      if (touchIdToId[i] === touchId) { touchIdToId[i] = undefined; }\r\n    }\r\n    i--;\r\n    for(; i >= 0; i--) {\r\n      if (touchIdToId[i] === undefined) {\r\n        touchIdToId.pop();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  },\r\n\r\n  startHandler = function(event) {\r\n    var\r\n      dT = state.getDT(event, 20),\r\n      changedTouches = event.changedTouches,\r\n      length = changedTouches.length,\r\n      i = 0;\r\n\r\n    for(; i < length; i++) {\r\n      var\r\n        ev = changedTouches[i],\r\n        id = resolveId(ev.identifier);\r\n      buffer.push([3, dT, 1, id, ev.screenX, ev.screenY],\r\n                  [4, 20, 1,  5,         18,         18]);\r\n      dT = 0; // next\r\n    }\r\n\r\n    return true;\r\n  },\r\n\r\n  endHandler = function(event) {\r\n    var\r\n      dT = state.getDT(event, 20),\r\n      changedTouches = event.changedTouches,\r\n      length = changedTouches.length,\r\n      i = 0;\r\n\r\n    for(; i < length; i++) {\r\n      var\r\n        ev = changedTouches[i],\r\n        id = resolveId(ev.identifier);\r\n      buffer.push([3, dT, 0, id, ev.screenX, ev.screenY],\r\n                  [4, 20, 1,  5,         18,         18]);\r\n\r\n      removeId(ev.identifier);\r\n\r\n      dT = 0; // next\r\n    }\r\n\r\n    return true;\r\n  },\r\n\r\n  moveHandler = function(event) {\r\n    var\r\n      dT = state.getDT(event, 20),\r\n      changedTouches = event.changedTouches,\r\n      length = changedTouches.length,\r\n      i = 0;\r\n\r\n    for(; i < length; i++) {\r\n      var\r\n        ev = changedTouches[i],\r\n        id = resolveId(ev.identifier);\r\n      buffer.push([1, dT, 0, id, ev.screenX, ev.screenY],\r\n                  [4, 20, 1,  5,         18,         18]);\r\n      dT = 0; // next\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\nthis.start = function() {\r\n  element.addEventListener(startEventName, startHandler);\r\n  element.addEventListener(moveEventName, moveHandler);\r\n  element.addEventListener(endEventName, endHandler);\r\n};\r\n\r\nthis.stop = function() {\r\n  element.removeEventListener(startEventName, startHandler);\r\n  element.removeEventListener(moveEventName, moveHandler);\r\n  element.removeEventListener(endEventName, endHandler);\r\n};\r\n\r\n// ---------------------------------------------------------------------------\r\n};\r\n\r\nmodule.exports = TouchHandler;\r\n"},"hash":"f2d2a8e0dd57b4456c12c73ff619487e"}