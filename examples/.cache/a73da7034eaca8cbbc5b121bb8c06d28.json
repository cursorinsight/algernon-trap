{"dependencies":[],"generated":{"js":"/* global module */\r\n\r\nvar State = function(window, transport, idleTimeout) {\r\n\"use strict\";\r\n// ---------------------------------------------------------------------------\r\n\r\nvar\r\n  idleHandler, idleTimer,\r\n  epochTs, lastTs;\r\n\r\nif (typeof idleTimeout === \"number\") {\r\n  idleHandler = function() {\r\n    transport.send();\r\n    idleTimer = null;\r\n  };\r\n}\r\n\r\n/*\r\n * Returns a stable time difference (between events, even if event does not\r\n * support event.timeStamp).\r\n *\r\n * Examples:\r\n *                  0 -- firefox window resize / scroll\r\n *          161262400 -- firefox mouse move\r\n *         1409096136 -- timestamp sec\r\n *         2000000000 -- timestamp sec boundary\r\n *      1409095770713 -- chrome all\r\n *      1409096838717 -- firefox (new Date()).getTime()\r\n *   1000000000000000 -- timestamp micro boundary\r\n *   1409096424364149 -- firefox custom event\r\n */\r\nthis.getDT = function(event, bits) {\r\n\r\n  var\r\n    round = Math.round,\r\n    currentTs = event && typeof event.timeStamp === \"number\" && event.timeStamp || (new Date()).getTime(),\r\n    dT;\r\n\r\n  if (idleTimer) {\r\n    window.clearTimeout(idleTimer);\r\n    idleTimer = null;\r\n  }\r\n\r\n  if (currentTs > 1000000000000000) { // (microseconds) in Firefox, special events\r\n    currentTs = round(currentTs / 1000);\r\n  }\r\n\r\n  if (currentTs < 2000000000) { // (milliseconds) it's Firefox; take care\r\n    if (!epochTs) {\r\n      epochTs = (new Date()).getTime() - currentTs; \r\n    }\r\n    if (lastTs) {\r\n      dT = (currentTs + epochTs) - lastTs;\r\n    }\r\n    lastTs = (currentTs + epochTs);\r\n  } else {                      // (milliseconds) everything else\r\n    if (lastTs) {\r\n      dT = currentTs - lastTs;\r\n    }\r\n    lastTs = currentTs;\r\n  }\r\n\r\n  // var dT1 = dT;\r\n\r\n  if (dT === undefined) {\r\n    return 0;\r\n  }\r\n\r\n  if (typeof idleTimeout === \"number\") {\r\n    idleTimer = window.setTimeout(idleHandler, idleTimeout);\r\n  }\r\n\r\n  if (bits) {\r\n    var max = (1 << bits) - 1;\r\n    dT = dT > max ? max : dT;\r\n  }\r\n\r\n  // TODO we should correct sync (when dT < 0)\r\n  // if (dT < 0) { // we can correct sync\r\n  //   epochTs = epochTs + dT;\r\n  //   lastTs  = lastTs + dT;\r\n  //   dT = 0;\r\n  // }\r\n  // console.log(dT1, dT, dT1 !== dT && \"-----------------------------------------\");\r\n\r\n  return dT;\r\n};\r\n\r\nthis.lastTs = function() {\r\n  return lastTs;\r\n};\r\n\r\nthis.start = function() {\r\n  // noop\r\n};\r\n\r\nthis.stop = function() {\r\n  lastTs = null;\r\n};\r\n\r\n// ---------------------------------------------------------------------------\r\n};\r\n\r\nmodule.exports = State;\r\n"},"hash":"851d3d6cc76bd47843c03fe8c4fde123"}