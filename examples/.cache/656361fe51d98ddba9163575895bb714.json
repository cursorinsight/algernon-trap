{"dependencies":[],"generated":{"js":"/* global module */\r\n\r\nvar Transport = function(window) {\r\n\"use strict\";\r\n// ---------------------------------------------------------------------------\r\n\r\n// @constant\r\nvar map  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n// @constant\r\nvar head = \"BB\"; // v2 :)\r\n\r\n// buffer\r\nvar buffer = \"\";\r\n\r\n// Locals.\r\nvar\r\n  encodeWrapper = window.encodeURIComponent,\r\n\r\n  url = \"/s\",\r\n  headers = {},\r\n  counter = 1,\r\n  sessionID,\r\n\r\n  encodeValues = function(values, sizes) {\r\n    var idx,\r\n        len = values.length,\r\n        bc = 0, // bit counter\r\n        cv, // current value\r\n        av = 0, // actual value\r\n        size,\r\n        results = \"\";\r\n\r\n    for (idx = 0; idx < len; idx++) {\r\n      cv = values[idx];\r\n      size = sizes[idx];\r\n      if (cv < 0) { cv = 0; }\r\n      if (cv > ((2 << size) - 1)) { cv = ((2 << size) - 1); }\r\n      if (av > 0) {\r\n        av = av << size;\r\n      }\r\n      av |= cv & ((1 << size) - 1);\r\n      bc += size;\r\n      while (bc > 6) {\r\n        bc -= 6;\r\n        results += map[av >>> bc];\r\n        av &= (1 << bc) - 1;\r\n      }\r\n    }\r\n\r\n    results += map[av << (6 - bc)];\r\n\r\n    return results;\r\n  },\r\n\r\n  encodeHeaders = function(headers) {\r\n    var headerString = \"\";\r\n\r\n    for (var key in headers) {\r\n      if (headers.hasOwnProperty(key)) {\r\n        headerString = headerString\r\n          + encodeWrapper(key) + \"=\"\r\n          + encodeWrapper(headers[key]) + \",\";\r\n      }\r\n    }\r\n\r\n    return encodeValues([headerString.length], [12]) + headerString;\r\n  };\r\n\r\n/*\r\n * @private\r\n * Resets buffer.\r\n */\r\nfunction reset() {\r\n  buffer = \"\";\r\n  return true;\r\n}\r\n\r\n/*\r\n * @private\r\n * Shifts available data.  That means resetting to its defaults and returning\r\n * already collected events.\r\n */\r\nfunction shift() {\r\n  var contents = buffer;\r\n  reset();\r\n  return contents;\r\n}\r\n\r\n/*\r\n * @private\r\n * Encodes raw bytes into stream format (length + URI encoded string\r\n * representation).\r\n */\r\nfunction encodeRawBytes(bytes) {\r\n  var encoded = encodeWrapper(bytes);\r\n  return encodeValues([encoded.length], [12]) + encoded;\r\n}\r\n\r\n/**\r\n * Sends data to destination.\r\n */\r\nthis.send = function(sync, callback) {\r\n  var\r\n    req = new window.XMLHttpRequest(),\r\n    onResponse = function() {\r\n      if (callback){\r\n        if ((req.readyState === 4) && (req.status === 200)) {\r\n          callback(req);\r\n        }\r\n      }\r\n    },\r\n    onSuccess = function() {}, // TODO\r\n    onFailure = function() {}; // TODO\r\n\r\n  // TODO make it configurable (enable/disable) w//o\r\n  headers[\"stream-id\"] = (sessionID ? sessionID : \"\") + \".\" + (counter++);\r\n\r\n  if (\"withCredentials\" in req) { // Is it a real XMLHttpRequest2 object\r\n    req.open(\"POST\", url, !sync);\r\n    req.onreadystatechange = onResponse; // TODO XMLHttpRequest2 has onload and co...\r\n    req.setRequestHeader(\"Content-type\", \"text/plain\");\r\n    // req.withCredentials = true;\r\n  } else if (typeof window.XDomainRequest !== \"undefined\") { // XDomainRequest only exists in IE\r\n    req = new window.XDomainRequest();\r\n    req.onload = onSuccess;\r\n    req.onerror = onFailure;\r\n    req.contentType = \"text/plain\";\r\n    req.open(\"POST\", url);\r\n  } else if (typeof window.ActiveXObject !== \"undefined\") { // Is it OK? :)\r\n    req = new window.ActiveXObject(\"Microsoft.XMLHTTP\");\r\n    req.open(\"POST\", url);\r\n  } else {\r\n    // TODO Firefox in test mode get to this branch\r\n    req.open(\"POST\", url, !sync);\r\n    req.onload = onResponse;\r\n    req.setRequestHeader(\"Content-type\", \"text/plain\");\r\n    //req = null;\r\n    //throw new Error('CORS not supported'); // TODO\r\n  }\r\n\r\n  req.send(head + encodeHeaders(headers) + shift());\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Sets destination URL.\r\n */\r\nthis.setUrl = function(u) {\r\n  url = u;\r\n};\r\n\r\n/**\r\n * Sets request header k/v pair.\r\n */\r\nthis.setHeader = function(key, value) {\r\n  headers[key] = value;\r\n};\r\n\r\n/**\r\n * Sets session ID for this session.\r\n */\r\nthis.setSessionID = function(s) {\r\n  sessionID = s;\r\n};\r\n\r\n/**\r\n * Returns current buffer contents (without version magic and headers).\r\n */\r\nthis.buffer = function() {\r\n  return buffer;\r\n};\r\n\r\n/**\r\n * Encodes and pushes values sampled by its given size into buffer.\r\n */\r\nthis.push = function(values, sizes) {\r\n  buffer += encodeValues(values, sizes);\r\n  return buffer;\r\n};\r\n\r\n/**\r\n * Encodes raw bytes into stream format (length + URI encoded string\r\n * representation).\r\n */\r\nthis.encodeRawBytes = encodeRawBytes;\r\n\r\n/**\r\n * Appends raw (encoded) bytes to buffer.\r\n */\r\nthis.pushRawBytes = function(bytes) {\r\n  buffer += encodeRawBytes(bytes);\r\n  return buffer;\r\n};\r\n\r\n/**\r\n * Resets buffer.\r\n */\r\nthis.reset = reset;\r\n\r\n// ---------------------------------------------------------------------------\r\n};\r\n\r\nmodule.exports = Transport;\r\n"},"hash":"254521725f84dc971cf519ebbcd567b3"}